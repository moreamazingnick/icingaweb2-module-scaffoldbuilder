<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\__Modulename__\Controllers;

use HttpException;
use Icinga\Module\__Modulename__\Common\Database;
use Icinga\Module\__Modulename__\SqliteFileHelper;
use Icinga\Module\__Modulename__\SqliteFilesTable;
use Icinga\Web\Notification;
use ipl\Html\Html;
use ipl\Web\Compat\CompatController;
use ipl\Web\Widget\ButtonLink;
use SQLite3;

class SqliteDatabaseController extends CompatController
{
    protected $path;
    public function init()
    {
        $this->assertPermission('__modulename__/sqlite-database');
        $this->path = $this->Module()->getBaseDir().DIRECTORY_SEPARATOR."schema";
        parent::init();
    }

    public function viewAction()
    {
        $this->addTitleTab($this->translate('View'));

        $fileToGet = $this->params->shift('name');
        $fileHelper = new SqliteFileHelper($this->path);
        $file = $fileHelper->getFile($fileToGet);
        $h1 = Html::tag('h1',null,"File: ".$fileToGet);
        $this->addContent($h1);

        if ($file !== false) {
            $fileContent = file_get_contents($file['realPath']);

            $fileRenderer= Html::tag('pre',null,$fileContent);

            $this->addContent($fileRenderer);

            return;
        }
        throw new HttpException(401,"Don't do this again...");

    }


    public function indexAction()
    {
        $this->addTitleTab($this->translate('SqliteFiles'));

        $this->addControl(
            (new ButtonLink($this->translate('Init Database'), \ipl\Web\Url::fromPath('__modulename__/sqlite-database/initialize-db'), 'sync'))->setAttribute('target','_self')
        );
        $this->addControl(
            (new ButtonLink($this->translate('Delete Database'), \ipl\Web\Url::fromPath('__modulename__/sqlite-database/delete'), 'trash'))->setAttribute('target','_self')
        );

        $fileHelper = new SqliteFileHelper($this->path);
        $files = $fileHelper->fetchFileList();


        $data =[];
        foreach ($files as $file) {
            $file = $fileHelper->getFile($file);
            $item = ['name'=>$file['name'], 'size'=>$file['size']];
            $data[]= (object) $item;
        }

        $this->addContent((new SqliteFilesTable())->setData($data));


    }
    public function deleteAction()
    {
        $this->addTitleTab($this->translate('Delete'));
        $db = Database::get();

        if($db->getConfig()->db=="sqlite"){

            try {
                unlink($db->getConfig()->dbname);
                Notification::info("Deletion successful");
                $this->redirect('__modulename__/sqlite-database');
            }catch (\Throwable $e ){
                Notification::error("Deletion Error: ".$e->getMessage());
            }
        }
        throw new \Icinga\Exception\Http\HttpException(401,"Don't do this again...");

    }
    public function migrateAction()
    {
        $this->addTitleTab("Migrate");
        $this->addContent(Html::tag("p",null,"migrate sqlite database"));
        $filename = $this->params->get('name');
        $a = new SqliteFileHelper($this->path);
        $file = $a->getFile($filename);
        $sqlContent = file_get_contents($file['realPath']);
        $db = Database::get();
        if($db->getConfig()->db=="sqlite"){

            $database = new SQLite3($db->getConfig()->dbname);
            try {
                $database->exec($sqlContent);
                Notification::info("Migration sucessful");
            }catch (\Throwable $e ){
                Notification::error("Migration Error: ".$e->getMessage());
            }
        }
        $this->redirect('__modulename__/sqlite-database');

    }

    public function initializeDbAction()
    {
        $this->addTitleTab("InitializeDB");
        $this->addContent(Html::tag("p",null,"Create sqlite database"));
        $clean = $this->params->shift("clean");
        $sqlFile = $this->Module()->getBaseDir().DIRECTORY_SEPARATOR."schema".DIRECTORY_SEPARATOR."sqlite.schema.sql";
        $sqlContent = file_get_contents($sqlFile);
        $db = Database::get();
        if($db->getConfig()->db=="sqlite"){
            if(!file_exists(dirname($db->getConfig()->dbname))){
                mkdir(dirname($db->getConfig()->dbname),0755,true);
            }
            if($clean != null){
                unlink($db->getConfig()->dbname);
            }

            $database = new SQLite3($db->getConfig()->dbname);
            try {
                $database->exec($sqlContent);
                Notification::info("Init successful");

            }catch (\Throwable $e ){
                Notification::error("Init error: ".$e->getMessage().". Use parameter clean to force recreation of database.");
            }
        }
        $this->redirect('__modulename__/sqlite-database');


    }

}
