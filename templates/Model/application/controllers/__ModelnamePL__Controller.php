<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\__Modulename__\Controllers;

use Icinga\Exception\ConfigurationError;

use Icinga\Module\__Modulename__\__Modelname__Restrictor;
use Icinga\Module\__Modulename__\Common\Database;
use Icinga\Module\__Modulename__\Controller;
use Icinga\Module\__Modulename__\Model\__Modelname__;

use Icinga\Module\__Modulename__\__Modelname__Table;
use Icinga\Module\__Modulename__\Web\Control\SearchBar\ObjectSuggestions;


use ipl\Web\Control\LimitControl;
use ipl\Web\Control\SortControl;

use ipl\Web\Url;
use ipl\Web\Widget\ButtonLink;

class __ModelnamePL__Controller extends Controller
{

    public function indexAction()
    {

        if ($this->hasPermission('__modulename__/__modelname__/modify')) {
            $this->addControl(
                (new ButtonLink(
                    $this->translate('New __Modelname__'),
                    Url::fromPath('__modulename__/__modelname__/new'),
                    'plus'
                ))->openInModal()
            );
        }

        $this->addTitleTab($this->translate('__ModelnamePL__'));

        try {
            $conn = Database::get();
        } catch (ConfigurationError $_) {
            $this->render('missing-resource', null, true);
            return;
        }

        $models = __Modelname__::on($conn)
            ->with([])
            ->withColumns([]);


        $sortColumns = [
            'name' => $this->translate('Name'),

        ];
        $restrictor = new __Modelname__Restrictor();
        $restrictor->applyRestrictions($models);

        $limitControl = $this->createLimitControl();
        $paginator = $this->createPaginationControl($models);
        $sortControl = $this->createSortControl($models, $sortColumns);

        $searchBar = $this->createSearchBar($models, [
            $limitControl->getLimitParam(),
            $sortControl->getSortParam()
        ]);

        if ($searchBar->hasBeenSent() && ! $searchBar->isValid()) {
            if ($searchBar->hasBeenSubmitted()) {
                $filter = $this->getFilter();
            } else {
                $this->addControl($searchBar);
                $this->sendMultipartUpdate();

                return;
            }
        } else {
            $filter = $searchBar->getFilter();
        }

        $models->peekAhead($this->view->compact);

        $models->filter($filter);

        $this->addControl($paginator);
        $this->addControl($sortControl);
        $this->addControl($limitControl);
        $this->addControl($searchBar);

        $this->addContent((new __Modelname__Table())->setData($models));

        if (! $searchBar->hasBeenSubmitted() && $searchBar->hasBeenSent()) {
            $this->sendMultipartUpdate(); // Updates the browser search bar
        }
    }

    public function completeAction()
    {
        $this->getDocument()->add(
            (new ObjectSuggestions())
                ->setModel(__Modelname__::class)
                ->forRequest($this->getServerRequest())
        );
    }

    public function searchEditorAction()
    {
        $editor = $this->createSearchEditor(__Modelname__::on(Database::get()), [
            LimitControl::DEFAULT_LIMIT_PARAM,
            SortControl::DEFAULT_SORT_PARAM
        ]);

        $this->getDocument()->add($editor);
        $this->setTitle(t('Adjust Filter'));
    }


}
